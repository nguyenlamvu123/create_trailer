##site: https://code.tutsplus.com/tutorials/base64-encoding-and-decoding-using-python--cms-25588
##site: https://stackabuse.com/encoding-and-decoding-base64-strings-in-python/
import base64, os, random 
samgiongzon = os.listdir(os.getcwd())
##from django.core.files.base import ContentFile
##print([i for i in samgiongzon if len(i) == len('3188.jpg')])
####imaaage = '12bet.jpg'
##if True:#for i in [i for i in samgiongzon if len(i) == len('3188.jpg')]:#range(1,7):
####    imaaage = '12bet'+ str(i)+ '.jpg'#'huong-ly-bi-to-2-ngoisao.vn-w960-h960.jpg'
##    image = open(
##        r'/media/asrock/New Volume/VNPhatLoc/VuIbcCrawler/deeecaptttttttttttcha/crawl_image/_1712agri/785646547 (589).jpg',
##        'rb'
##        )#open binary file in read mode
##    image_read = image.read()
##    image.close()
##    ##image_64_encode = base64.b64encode(image_read)
##    image_64_encode = base64.b64encode(image_read).decode('utf-8')
####    print(i)
##    print(image_64_encode+ '\n')##
##print(imaaage+ ': ', image_64_encode)
######image_64_decode = base64.decodebytes(bytes(image_64_encode, 'utf-8'))
######image_64_decode = base64.decodebytes(image_64_encode)
######image_64_decode = base64.b64decode('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')
######image_result = open('nangfthow.jpg', 'wb') # create a writable image and write the decoding result
######image_result.write(image_64_decode)
######image_result.close()

##encoded = base64.b64encode(open(imaaage, "rb").read())
##print(encoded)
##print(image_64_encode)

image_64_encode = b'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'
##image_64_decode = base64.decodebytes(bytes(image_64_encode, 'utf-8'))
image_64_decode = base64.decodebytes(image_64_encode)
##image_64_decode = base64.b64decode(image_64_encode)
image_result = open('nangtho.jpg', 'wb') # create a writable image and write the decoding result
image_result.write(image_64_decode)
image_result.close()
